# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2019, Armin Ronacher
# This file is distributed under the same license as the Flask-SQLAlchemy
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
lmsgid ""
msgstr ""
"Project-Id-Version: Flask-SQLAlchemy 2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-09 11:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../quickstart.rst:4
msgid "Quickstart"
msgstr "초간단 안내"

#: ../../quickstart.rst:8
msgid ""
"Flask-SQLAlchemy is fun to use, incredibly easy for basic applications, "
"and readily extends for larger applications.  For the complete guide, "
"checkout the API documentation on the :class:`SQLAlchemy` class."
msgstr ""
"플라스크-SQL알케미는 기본적인 애플리케이션에서는 믿기지 않을 정도로 사용하기 쉽고 "
"대규모 애플리케이션에도 확장이 가능하다. 전체 안내서는 :class:`SQLAlchemy` 클래스 "
"API 문서를 확인하라."

#: ../../quickstart.rst:13
msgid "A Minimal Application"
msgstr "초미니 애플리케이션"

#: ../../quickstart.rst:15
msgid ""
"For the common case of having one Flask application all you have to do is"
" to create your Flask application, load the configuration of choice and "
"then create the :class:`SQLAlchemy` object by passing it the application."
msgstr ""
"플라스크 애플리케이션이 하나인 경우에는 플라스크 애플리케이션을 생성하고 "
"선택한 설정을 로드한 다음에 애플리케이션을 인수로 넘겨서 :class:`SQLAlchemy` "
"객체를 생성하면 된다."

#: ../../quickstart.rst:19
msgid ""
"Once created, that object then contains all the functions and helpers "
"from both :mod:`sqlalchemy` and :mod:`sqlalchemy.orm`.  Furthermore it "
"provides a class called ``Model`` that is a declarative base which can be"
" used to declare models::"
msgstr ""
"이 객체는 :mod:`sqlalchemy` 및 :mod:`sqlalchemy.orm`\ 에 있는 "
"모든 함수와 보조기능을 담고 있다. 또한 모델을 선언하는데 사용되는 "
"선언 베이스(declarative base)인 ``Model`` 클래스도 제공한다.::"

#: ../../quickstart.rst:40
msgid ""
"To create the initial database, just import the ``db`` object from an "
"interactive Python shell and run the :meth:`SQLAlchemy.create_all` method"
" to create the tables and database::"
msgstr ""
"데이터베이스를 처음으로 생성하려면 파이썬 대화형 셸에서 ``db`` 객체를 임포트해서 "
":meth:`SQLAlchemy.create_all` 메서드를 호출하면 테이블과 데이터베이스 생성된다.::"

#: ../../quickstart.rst:48
msgid "Boom, and there is your database.  Now to create some users::"
msgstr "짠, 이제 데이터베이스가 생성됐다. 이제 사용자를 몇 명 생성해보자::"

#: ../../quickstart.rst:54
msgid "But they are not yet in the database, so let's make sure they are::"
msgstr "하지만 아직 데이터베이스안에는 없다. 데이터베이스내에 생성하려면::"

#: ../../quickstart.rst:60
msgid "Accessing the data in database is easy as a pie::"
msgstr "데이터베이스 안의 데이터를 접근하는 것은 아주 쉽다::"

#: ../../quickstart.rst:67
msgid ""
"Note how we never defined a ``__init__`` method on the ``User`` class? "
"That's because SQLAlchemy adds an implicit constructor to all model "
"classes which accepts keyword arguments for all its columns and "
"relationships.  If you decide to override the constructor for any reason,"
" make sure to keep accepting ``**kwargs`` and call the super constructor "
"with those ``**kwargs`` to preserve this behavior::"
msgstr ""
"``User`` 클래스에서 ``__init__`` 메서드를 정의하지 않았었다는 점을 눈치챘는가? "
"SQL알케미가 모든 모델 클래스에 대해 열과 관계를 키워드 인수로 가지는 암시적 생성자를 "
"자동으로 만들어주기 때문이다. 만약 어떤 이유로든 이 생성자를 덮어쓰려면 "
"``**kwargs``\ 를 받고 부모 생성자를 ``**kwargs``\ 로 호출해야 한다.::" 

#: ../../quickstart.rst:81
msgid "Simple Relationships"
msgstr "간단한 관계"

#: ../../quickstart.rst:83
msgid ""
"SQLAlchemy connects to relational databases and what relational databases"
" are really good at are relations.  As such, we shall have an example of "
"an application that uses two tables that have a relationship to each "
"other::"
msgstr ""
"SQL알케미는 관계형 데이터베이스에 연결하고 관계형 데이터베이스는 관계를 다룬다. "
"두 개의 테이블이 서로 관계를 가지는 애플리케이션 예를 살펴보자::"

#: ../../quickstart.rst:113
msgid "First let's create some objects::"
msgstr "우선 객체를 몇 개 만든다::"

#: ../../quickstart.rst:121
msgid ""
"As you can see, there is no need to add the ``Post`` objects to the "
"session. Since the ``Category`` is part of the session all objects "
"associated with it through relationships will be added too.  It does not "
"matter whether :meth:`db.session.add() "
"<sqlalchemy.orm.session.Session.add>` is called before or after creating "
"these objects.  The association can also be done on either side of the "
"relationship - so a post can be created with a category or it can be "
"added to the list of posts of the category."
msgstr ""
"여기에서 보듯이 ``Post`` 객체는 세션에 추가할 필요가 없다. "
"``Category``\ 가 추가해야 하는 모든 객체를 relationship을 통해 연결한 "
"세션의 일부이기 때문이다. "
":meth:`db.session.add() <sqlalchemy.orm.session.Session.add>` 메서드가 "
이 객체를 생성하기 전에 호출되었든 나중에 호출되었든 상관없다. "
"릴레이션이 양쪽으로 관계를 맺고 있기 때문에 포스트를 카테고리와 연결하여 "
"생성할 수도 있고 카테고리에 속하는 포스트의 리스트를 더할 수도 있다. "

#: ../../quickstart.rst:130
msgid ""
"Let's look at the posts. Accessing them will load them from the database "
"since the relationship is lazy-loaded, but you will probably not notice "
"the difference - loading a list is quite fast::"
msgstr ""
"포스트를 살펴보자. 릴레이션이 lazy유형이므로 포스트에 접근하면 그제서야 "
"데이터베이스에서 로드하지만 로딩이 빠르기 때문에 차이를 느낄 수 없다.::"  

#: ../../quickstart.rst:137
msgid ""
"While lazy-loading a relationship is fast, it can easily become a major "
"bottleneck when you end up triggering extra queries in a loop for more "
"than a few objects.  For this case, SQLAlchemy lets you override the "
"loading strategy on the query level. If you wanted a single query to load"
" all categories and their posts, you could do it like this::"
msgstr ""
"릴레이션을 lazy-loadin하는 것은 속도는 빠르지만 여러개의 객체에 대해 "
"추가적인 쿼리를 반복하게 되면 병목현상이 일어난다. "


#: ../../quickstart.rst:150
msgid ""
"If you want to get a query object for that relationship, you can do so "
"using :meth:`~sqlalchemy.orm.query.Query.with_parent`.  Let's exclude "
"that post about Snakes for example::"
msgstr ""

#: ../../quickstart.rst:159
msgid "Road to Enlightenment"
msgstr ""

#: ../../quickstart.rst:161
msgid "The only things you need to know compared to plain SQLAlchemy are:"
msgstr ""

#: ../../quickstart.rst:163
msgid ":class:`SQLAlchemy` gives you access to the following things:"
msgstr ""

#: ../../quickstart.rst:165
msgid ""
"all the functions and classes from :mod:`sqlalchemy` and "
":mod:`sqlalchemy.orm`"
msgstr ""

#: ../../quickstart.rst:167
msgid "a preconfigured scoped session called ``session``"
msgstr ""

#: ../../quickstart.rst:168
msgid "the :attr:`~SQLAlchemy.metadata`"
msgstr ""

#: ../../quickstart.rst:169
msgid "the :attr:`~SQLAlchemy.engine`"
msgstr ""

#: ../../quickstart.rst:170
msgid ""
"a :meth:`SQLAlchemy.create_all` and :meth:`SQLAlchemy.drop_all` methods "
"to create and drop tables according to the models."
msgstr ""

#: ../../quickstart.rst:172
msgid "a :class:`Model` baseclass that is a configured declarative base."
msgstr ""

#: ../../quickstart.rst:174
msgid ""
"The :class:`Model` declarative base class behaves like a regular Python "
"class but has a ``query`` attribute attached that can be used to query "
"the model.  (:class:`Model` and :class:`BaseQuery`)"
msgstr ""

#: ../../quickstart.rst:178
msgid ""
"You have to commit the session, but you don't have to remove it at the "
"end of the request, Flask-SQLAlchemy does that for you."
msgstr ""

